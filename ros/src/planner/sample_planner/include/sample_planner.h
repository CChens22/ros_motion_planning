/***********************************************************
 * 
 * @file: sample_planner.h
 * @breif: Contains the sample planner ROS wrapper class
 * @author: Yang Haodong
 * @update: 2022-10-26
 * @version: 1.0
 * 
 * Copyright (c) 2022ï¼Œ Yang Haodong
 * All rights reserved.
 * --------------------------------------------------------
 *
 **********************************************************/
#ifndef SAMPLE_PLANNER_H
#define SAMPLE_PLANNER_H

#include <nav_core/base_global_planner.h>
#include <nav_msgs/Path.h>
#include <nav_msgs/GetPlan.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/Point.h>
#include <std_msgs/ColorRGBA.h>
#include <std_msgs/Header.h>
#include <visualization_msgs/Marker.h>

#include "global_planner.h"

namespace sample_planner {
class SamplePlanner : public nav_core::BaseGlobalPlanner {
    public:
        /**
         * @brief  Constructor(default)
         */
        SamplePlanner();
        /**
         * @brief  Constructor
         * @param  name     planner name
         * @param  costmap  costmap pointer
         * @param  frame_id costmap frame ID
         */
        SamplePlanner(std::string name, costmap_2d::Costmap2D* costmap, std::string frame_id);
        /**
         * @brief Destructor
         * @return No return value
         * @details default
         */
        ~SamplePlanner();

        /**
         * @brief  Planner initialization
         * @param  name         planner name
         * @param  costmapRos   costmap ROS wrapper
         */
        void initialize(std::string name, costmap_2d::Costmap2DROS* costmapRos);
        /**
         * @brief  Planner initialization
         * @param  name     planner name
         * @param  costmap  costmap pointer
         * @param  frame_id costmap frame ID
         */
        void initialize(std::string name, costmap_2d::Costmap2D* costmap, std::string frame_id);
        /**
         * @brief plan a path given start and goal in world map
         * @param start     start in world map
         * @param goal      goal in world map
         * @param plan      plan
         * @param tolerance error tolerance
         * @return true if find a path successfully else false
         */
        bool makePlan(const geometry_msgs::PoseStamped& start, const geometry_msgs::PoseStamped& goal,
                    std::vector<geometry_msgs::PoseStamped>& plan);
        bool makePlan(const geometry_msgs::PoseStamped& start, const geometry_msgs::PoseStamped& goal, double tolerance,
                    std::vector<geometry_msgs::PoseStamped>& plan);
        /**
         * @brief  publish planning path
         * @param  path planning path
         */
        void publishPlan(const std::vector<geometry_msgs::PoseStamped>& plan);
        /**
         * @brief  regeister planning service
         * @param  req  request from client
         * @param  resp response from server
         */
        bool makePlanService(nav_msgs::GetPlan::Request& req, nav_msgs::GetPlan::Response& resp);


    protected:
        // costmap
        costmap_2d::Costmap2D* costmap_;
        // costmap frame ID
        std::string frame_id_;
        // path planning publisher
        ros::Publisher plan_pub_;
        // initialization flag
        bool initialized_;
        // global graph planner
        global_planner::GlobalPlanner* g_planner_;
        // nodes explorer publisher
        ros::Publisher expand_pub_;
        // planning service
        ros::ServiceServer make_plan_srv_;

    private:
        // thread mutex
        boost::mutex mutex_;
        // offset of transform from world(x,y) to grid map(x,y)
        double convert_offset_;
        // tolerance
        double tolerance_;
        // whether outline the boudary of map
        bool is_outline_;
        // obstacle inflation factor
        double factor_;
        // whether publish expand map or not
        bool is_expand_;
        // random sample points
        int sample_points_;
        // max distance between sample points
        double sample_max_d_;
        // optimization r
        double opt_r_;


    protected:
        /**
         * @brief  Inflate the boundary of costmap into obstacles to prevent cross planning
         * @param  costarr  costmap pointer
         * @param  nx       pixel number in costmap x direction
         * @param  ny       pixel number in costmap y direction
         */
        void _outlineMap(unsigned char* costarr, int nx, int ny);
        /**
         * @brief  publish expand zone
         * @param  expand  set of expand nodes
         */
        void _publishExpand(std::vector<Node> &expand);
        /**
         * @brief  calculate plan from planning path
         * @param  path path generated by global planner
         * @param  plan plan transfromed from path
         * @return bool true if successful else false
         */
        bool _getPlanFromPath(std::vector<Node> path, std::vector<geometry_msgs::PoseStamped>& plan);
        /**
         * @brief  tranform from costmap(x, y) to world map(x, y)
         * @param  mx costmap x
         * @param  my costmap y
         * @param  wx world map x
         * @param  wy world map y
         */
        void _mapToWorld(double mx, double my, double& wx, double& wy);
        /**
         * @brief  tranform from world map(x, y) to costmap(x, y)
         * @param  mx costmap x
         * @param  my costmap y
         * @param  wx world map x
         * @param  wy world map y
         */
        bool _worldToMap(double wx, double wy, double& mx, double& my);
        /**
         *  @brief Publishes a Marker msg with two points in Rviz
         *  @param line_msg Pointer to existing marker object.
         *  @param line_pub Pointer to existing marker Publisher.
         *  @param id first marker id
         *  @param pid second marker id
         */
        void _pubLine(visualization_msgs::Marker* line_msg, ros::Publisher* line_pub, int id, int pid);
        void _pubGeometry(ros::Publisher* pub);
};
}
#endif