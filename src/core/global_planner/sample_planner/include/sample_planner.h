/**
 * *********************************************************
 *
 * @file: sample_planner.h
 * @brief: Contains the sample planner ROS wrapper class
 * @author: Yang Haodong
 * @date: 2022-10-26
 * @version: 1.0
 *
 * Copyright (c) 2024, Yang Haodong.
 * All rights reserved.
 *
 * --------------------------------------------------------
 *
 * ********************************************************
 */
#ifndef SAMPLE_PLANNER_H
#define SAMPLE_PLANNER_H

#include <ros/ros.h>
#include <nav_core/base_global_planner.h>
#include <nav_msgs/Path.h>
#include <nav_msgs/GetPlan.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/Point.h>
#include <std_msgs/ColorRGBA.h>
#include <std_msgs/Header.h>
#include <visualization_msgs/Marker.h>

#include "global_planner.h"

namespace sample_planner
{
class SamplePlanner : public nav_core::BaseGlobalPlanner
{
public:
  /**
   * @brief Constructor a new Sample Planner object
   */
  SamplePlanner();

  /**
   * @brief Construct a new Sample Planner object
   * @param name        planner name
   * @param costmap_ros the cost map to use for assigning costs to trajectories
   */
  SamplePlanner(std::string name, costmap_2d::Costmap2DROS* costmap_ros);

  /**
   * @brief Destroy the Sample Planner object
   */
  ~SamplePlanner() = default;

  /**
   * @brief Planner initialization
   * @param name       planner name
   * @param costmapRos costmap ROS wrapper
   */
  void initialize(std::string name, costmap_2d::Costmap2DROS* costmapRos);

  /**
   * @brief Plan a path given start and goal in world map
   * @param start start in world map
   * @param goal  goal in world map
   * @param plan  plan
   * @return true if find a path successfully, else false
   */
  bool makePlan(const geometry_msgs::PoseStamped& start, const geometry_msgs::PoseStamped& goal,
                std::vector<geometry_msgs::PoseStamped>& plan);

  /**
   * @brief Publish planning path
   * @param path planning path
   */
  void publishPlan(const std::vector<geometry_msgs::PoseStamped>& plan);

  /**
   * @brief Regeister planning service
   * @param req  request from client
   * @param resp response from server
   */
  bool makePlanService(nav_msgs::GetPlan::Request& req, nav_msgs::GetPlan::Response& resp);

protected:
  /**
   * @brief publish expand zone
   * @param expand set of expand nodes
   */
  void _publishExpand(std::vector<Node>& expand);

  /**
   * @brief Calculate plan from planning path
   * @param path path generated by global planner
   * @param plan plan transfromed from path, i.e. [start, ..., goal]
   * @return bool true if successful, else false
   */
  bool _getPlanFromPath(std::vector<Node> path, std::vector<geometry_msgs::PoseStamped>& plan);

  /**
   *  @brief Publishes a Marker msg with two points in Rviz
   *  @param line_msg Pointer to existing marker object.
   *  @param line_pub Pointer to existing marker Publisher.
   *  @param id       first marker id
   *  @param pid      second marker id
   */
  void _pubLine(visualization_msgs::Marker* line_msg, ros::Publisher* line_pub, int id, int pid);

protected:
  bool initialized_;                                          // initialization flag
  costmap_2d::Costmap2DROS* costmap_ros_;                     // costmap(ROS wrapper)
  std::string frame_id_;                                      // costmap frame ID
  std::string planner_name_;                                  // planner name
  std::shared_ptr<global_planner::GlobalPlanner> g_planner_;  // global graph planner
  ros::Publisher plan_pub_;                                   // path planning publisher
  ros::Publisher expand_pub_;                                 // nodes explorer publisher
  ros::ServiceServer make_plan_srv_;                          // planning service

private:
  bool is_outline_;                                       // whether outline the boudary of map
  bool is_expand_;                                        // whether publish expand map or not
  double tolerance_;                                      // tolerance
  double factor_;                                         // obstacle inflation factor
  std::vector<geometry_msgs::PoseStamped> history_plan_;  // history plan
};
}  // namespace sample_planner
#endif